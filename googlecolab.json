# Data Loading and Preprocessing
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score

# Set style
plt.style.use('seaborn')
sns.set_palette('deep')

"""
# Traffic Flow Prediction
## Data Loading and Initial Analysis
"""

# Load data
df = pd.read_csv('Metro_Interstate_Traffic_Volume.csv')
print("Dataset Shape:", df.shape)
df.head()

"""
## Data Preprocessing
"""

# Clean and process data
df = df.dropna()
df['date_time'] = pd.to_datetime(df['date_time'])
df['hour'] = df['date_time'].dt.hour
df['day'] = df['date_time'].dt.day
df['month'] = df['date_time'].dt.month
df['weekday'] = df['date_time'].dt.weekday

"""
## Exploratory Data Analysis
"""

# Correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Feature Correlations")
plt.tight_layout()
plt.show()

"""
## Model Training and Evaluation
"""

# Prepare features
features = ['hour', 'day', 'month', 'weekday', 'temp', 'rain_1h', 'snow_1h', 'clouds_all']
X = df[features]
y = df['traffic_volume']

# Split and train
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

"""
## Model Predictions and Visualization
"""

# Make predictions
y_pred = model.predict(X_test)

# Plot actual vs predicted
plt.figure(figsize=(12, 6))
plt.plot(y_test.values[:100], label='Actual', alpha=0.7, color='blue')
plt.plot(y_pred[:100], label='Predicted', alpha=0.7, color='red')
plt.title("Traffic Volume: Actual vs Predicted")
plt.xlabel("Sample Index")
plt.ylabel("Traffic Volume")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Print metrics
print(f"Mean Absolute Error: {mean_absolute_error(y_test, y_pred):.2f}")
print(f"RÂ² Score: {r2_score(y_test, y_pred):.2f}")

"""
## Feature Importance Analysis
"""

# Plot feature importance
importance = pd.DataFrame({

}).sort_values('importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(data=importance, x='importance', y='feature')
plt.title("Feature Importance")
plt.tight_layout()
plt.show()